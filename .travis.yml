language: python

matrix:
  include:
    - python: 3.5
      env: export FAIL_ON_EXTERNAL_DEPRECATION='False'
    - python: 3.5
      env: export FAIL_ON_EXTERNAL_DEPRECATION='True'
    - os: osx
      language: generic
      python: 3.5
      env: export FAIL_ON_EXTERNAL_DEPRECATION='False'
    - os: osx
      language: generic
      python: 3.5
      env: export FAIL_ON_EXTERNAL_DEPRECATION='True'
  allow_failures:
    - env: export FAIL_ON_EXTERNAL_DEPRECATION='True'

before_install:
  # Does not matter which miniconda we get, we still create a virtualenv
  - if [[ $TRAVIS_OS_NAME == 'osx' ]] ; then curl "https://repo.continuum.io/miniconda/Miniconda3-latest-MacOSX-x86_64.sh" -o miniconda.sh; else wget https://repo.continuum.io/miniconda/Miniconda3-latest-Linux-x86_64.sh -O miniconda.sh; fi
  - chmod +x miniconda.sh
  - ./miniconda.sh -b -p $HOME/miniconda
  - export PATH="$HOME/miniconda/bin:$PATH"
  - hash -r
  # miniconda is not always up-to-date with conda.
  - conda update --yes conda

install:
  - DEPS="nose numpy scipy matplotlib ipython h5py sympy scikit-learn dill natsort mock setuptools cython"
  - conda create -n testenv --yes $DEPS
  - source activate testenv
  - conda install pip
  - pip install coverage coveralls traits traitsui request
  - python setup.py install

script:
  - python setup.py build_ext --inplace
  - python continuous_integration/nosetest.py --with-coverage hyperspy

after_success:
    - coveralls
    - python setup.py sdist
    - if [[ $TRAVIS_OS_NAME == 'osx' ]]; then python setup.py bdist_wheel; fi

before_deploy:
  - export WHEELS=$(ls ./dist/*.whl)

deploy:
    provider: releases
    api_key: "GITHUB OAUTH TOKEN"
    file:
        - "${WHEELS}"
    overwrite: true
    on:
        tags: true
